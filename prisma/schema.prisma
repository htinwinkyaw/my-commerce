datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  name            String?
  email           String   @unique
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  emailVerified   DateTime?
  hashedPassword  String?
  image           String?
  role            Role      @default(USER)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  accounts        Account[]
  orders          Order[]
  address         Address[]
  reviews         Review[]
  sessions        Session[]
}

model Address {
  id                String  @id   @default(auto())  @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  receiverName      String
  line              String
  township          String
  state             String
  postalCode        String
  phone             String
  deliveryNote      String?
  isSelectedAddress Boolean @default(true)
  
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  price       Int
  description String
  images      String[]
  brand       String
  categoryId  String    @db.ObjectId
  inStock     Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  reviews     Review[]

  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Order {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  userId          String          @db.ObjectId
  products        CartProductType[]
  amount          Int
  addressId       String          @db.ObjectId      
  paymentStatus   PaymentStatus   @default(pending)
  deliveryStatus  DeliveryStatus  @default(pending)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Cart {
  id              String @id @db.ObjectId @map("_id") @default(auto())
  products        CartProductType[]
  userId          String @db.ObjectId
}

model Review {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  comment   String?
  rating    Int
  userId    String    @db.ObjectId
  productId String    @db.ObjectId
  createdAt DateTime  @default(now())

  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  products  Product[]
}

model Banner {
  id      String  @id @map("_id") @default(auto()) @db.ObjectId
  link    String?
  image   String
  active  Boolean @default(false)
}

type CartProductType {
  id          String
  name        String
  price       Int
  description String
  brand       String
  quantity    Int
  // image       String
}

enum Role {
  USER
  ADMIN
}

enum PaymentStatus {
  pending
  completed
}

enum DeliveryStatus {
  pending
  dispatched
  completed
}
