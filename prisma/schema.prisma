datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  orders        Order[]
  reviews       Review[]
  sessions      Session[]
}

model Product {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  images      String[]
  brand       String
  categoryId  String    @db.ObjectId
  inStock     Boolean
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  reviews     Review[]

  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Order {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  userId          String          @db.ObjectId
  produts         CartProductType[]
  amount          Int
  address         AddressType
  paymentStatus   PaymentStatus
  deliveryStatus  DeliveryStatus
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Cart {
  id        String @id @db.ObjectId @map("_id") @default(auto())
  name      String
  price     Int
  image     String
  quantity  Int
  userId    String @db.ObjectId
}

model Review {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  comment   String?
  rating    Int
  userId    String  @db.ObjectId
  productId String  @db.ObjectId

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  products  Product[]
}

type AddressType {
  city        String
  country     String
  line1       String
  line2       String?
  postalCode  String
  state       String
}

type CartProductType {
  name      String
  price     Int
  image     String
  quantity  Int
}

enum Role {
  USER
  ADMIN
}

enum PaymentStatus {
  pending
  completed
}

enum DeliveryStatus {
  pending
  dispatched
  completed
}
